extern void         v8_GameInit                  ( void );
extern int          v8_Spawn                     ( edict_t *pent );
extern void         v8_Think                     ( edict_t *pent );
extern void         v8_Use                       ( edict_t *pentUsed, edict_t *pentOther );
extern void         v8_Touch                     ( edict_t *pentTouched, edict_t *pentOther );
extern void         v8_Blocked                   ( edict_t *pentBlocked, edict_t *pentOther );
extern void         v8_KeyValue                  ( edict_t *pentKeyvalue, KeyValueData *pkvd );
extern void         v8_Save                      ( edict_t *pent, SAVERESTOREDATA *pSaveData );
extern int          v8_Restore                   ( edict_t *pent, SAVERESTOREDATA *pSaveData, int globalEntity );
extern void         v8_SetAbsBox                 ( edict_t *pent );
extern void         v8_SaveWriteFields           ( SAVERESTOREDATA *, const char *, void *, TYPEDESCRIPTION *, int );
extern void         v8_SaveReadFields            ( SAVERESTOREDATA *, const char *, void *, TYPEDESCRIPTION *, int );
extern void         v8_SaveGlobalState           ( SAVERESTOREDATA * );
extern void         v8_RestoreGlobalState        ( SAVERESTOREDATA * );
extern void         v8_ResetGlobalState          ( void );
extern qboolean     v8_ClientConnect             ( edict_t *pEntity, const char *pszName, const char *pszAddress, char szRejectReason[ 128 ] );
extern void         v8_ClientDisconnect          ( edict_t *pEntity );
extern void         v8_ClientKill                ( edict_t *pEntity );
extern void         v8_ClientPutInServer         ( edict_t *pEntity );
extern void         v8_ClientCommand             ( edict_t *pEntity );
extern void         v8_ClientUserInfoChanged     ( edict_t *pEntity, char *infobuffer );
extern void         v8_ServerActivate            ( edict_t *pEdictList, int edictCount, int clientMax );
extern void         v8_ServerDeactivate          ( void );
extern void         v8_PlayerPreThink            ( edict_t *pEntity );
extern void         v8_PlayerPostThink           ( edict_t *pEntity );
extern void         v8_StartFrame                ( void );
extern void         v8_ParmsNewLevel             ( void );
extern void         v8_ParmsChangeLevel          ( void );
extern const char  *v8_GetGameDescription        ( void );
extern void         v8_PlayerCustomization       ( edict_t *pEntity, customization_t *pCustom );
extern void         v8_SpectatorConnect          ( edict_t *pEntity );
extern void         v8_SpectatorDisconnect       ( edict_t *pEntity );
extern void         v8_SpectatorThink            ( edict_t *pEntity );
extern void         v8_Sys_Error                 ( const char *error_string );
extern void         v8_PM_Move                   ( struct playermove_s *ppmove, qboolean server );
extern void         v8_PM_Init                   ( struct playermove_s *ppmove );
extern char         v8_PM_FindTextureType        ( char *name );
extern void         v8_SetupVisibility           ( struct edict_s *pViewEntity, struct edict_s *pClient, unsigned char **pvs, unsigned char **pas );
extern void         v8_UpdateClientData          ( const struct edict_s *ent, int sendweapons, struct clientdata_s *cd );
extern int          v8_AddToFullPack             ( struct entity_state_s *state, int e, edict_t *ent, edict_t *host, int hostflags, int player, unsigned char *pSet );
extern void         v8_CreateBaseline            ( int player, int eindex, struct entity_state_s *baseline, struct edict_s *entity, int playermodelindex, vec3_t player_mins, vec3_t player_maxs );
extern void         v8_RegisterEncoders          ( void );
extern int          v8_GetWeaponData             ( struct edict_s *player, struct weapon_data_s *info );
extern void         v8_CmdStart                  ( const edict_t *player, const struct usercmd_s *cmd, unsigned int random_seed );
extern void         v8_CmdEnd                    ( const edict_t *player );
extern int          v8_ConnectionlessPacket      ( const struct netadr_s *net_from, const char *args, char *response_buffer, int *response_buffer_size );
extern int          v8_GetHullBounds             ( int hullnumber, float *mins, float *maxs );
extern void         v8_CreateInstancedBaselines  ( void );
extern int          v8_InconsistentFile          ( const struct edict_s *player, const char *filename, char *disconnect_message );
extern int          v8_AllowLagCompensation      ( void );

#include <v8.h>

extern v8::Isolate* isolate;
extern v8::Handle<v8::Context> context;
extern edict_t *entities[33];
